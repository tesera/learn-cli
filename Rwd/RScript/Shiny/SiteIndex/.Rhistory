source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
len(mygeomdata)
length(mygeomdata)
length(shapeData.df)
length(shapeData.points)
length(shapeData)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
length(uidata)
uidata <- read.csv("E:/Rwd/Rdata/Archived/SLS/SiteIndex/Final_SI_Comparison_subset.csv", header = T, row.names=1)
length(uidata)
names(uidata)
length(rownames(uidata))
length(shapeData)
shapeData = readOGR(dsn="E:/Rwd/Rdata/Archived/SLS/SiteIndex", layer="SLS_Demo_Subset")
len(mygeomdata)
names(shapeData)
shapeData@data$id = rownames(shapeData@data)
shapeData.points = fortify(shapeData, region="id")
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
length(mygeomdata)
length(shapeData)
length(myData)
length(mydata)
length(shapeData.points)
length(shapeData@data$id)
shapeData@data$id[1]
shapeData@data$id[2]
shapeData[1]
shapeData[1,]
shapeData@data$id[1]
names(shapeData)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
length(shapeData.points)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
moncton = readOGR(dsn="E:/Rwd/RScript/Shiny/MONCTON", layer="druid")
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
moncton = readOGR(dsn="E:/Rwd/Rdata/Archived/IBC/MONCTON", layer="druid")
names(moncton)
moncton@data$id = rownames(moncton@data)
moncton@data$id[1]
mydata <- read.csv("E:/Rwd/Rdata/Archived/IBC/MONCTON/MRATForecasts.txt")
names(mydata)
source('E:/Rwd/RScript/Shiny/SiteIndex/ui.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
names(shapeData)
shapeData = readOGR(dsn="E:/Rwd/Rdata/Archived/SLS/SiteIndex", layer="SLS_Demo_Subset")
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
library(shiny)
library(maps)
library(mapdata)
library(sp) # required by maptools
library(maptools)
library(scales)
library(RColorBrewer)
library(ggplot2)
library(rgeos) # to replace gpclib
library(plyr) # best to load before reshape
library(reshape)
library(mapproj)
library(rgdal)
library(grid) #required by gridExtra
library(gridExtra)
library(shapefiles)
setwd("E:/Rwd/Rscript/Shiny/SiteIndex")
shapeData = readOGR(dsn="E:/Rwd/Rdata/Archived/SLS/SiteIndex", layer="SLS_Demo_Subset")
shapeData@data$id = rownames(shapeData@data)
shapeData.points = fortify(shapeData, region="id") # takes a while to process on an Intel i3
mydata <- read.csv("E:/Rwd/Rdata/Archived/SLS/SiteIndex/Final_SI_Comparison_subset.csv")
shapeData.df = join(shapeData.points, shapeData@data, by="id")
mygeomdata <- merge(shapeData.df, mydata, by.x="OBJECTID_1", by.y="OBJECTID_1")
library(shiny)
# Define UI for mapping of probability enquiry application
uidata <- read.csv("E:/Rwd/Rdata/Archived/IBC/MONCTON/MRATForecasts.txt", header = T, row.names=1)
attach(uidata)
VarNames <- names(uidata)
shinyUI(pageWithSidebar(
# Application title
headerPanel("Probability of Flooding"),
# Sidebar with controls to select the variable to plot
#
sidebarPanel(
tags$head(
tags$style(type="text/css", "select { width: 100px; }"), # defines width of dropdown panel
tags$style(type='text/css', ".span4 { max-width: 150px; }") # defines width of panel containing dropdown panel
# the above code then indirectly controls how wide the graphing panel is
),
selectInput("var", "Variable:",
choices = VarNames)
),
# Show the caption and plot of the requested variable
mainPanel(
h3(textOutput("caption")),
plotOutput("mapPlot")
)
))
shinyServer(function(input, output) {
# Compute the forumla text in a reactive expression since it is
# shared by the output$caption and output$cropPlot expressions
formulaText <- reactive({
paste("Variable:", input$var)
})
# Return the formula text for printing as a caption
output$caption <- renderText({
formulaText()
})
# "environment <-environment()" and "environment = environment" in ggplot captures the local environment
# so that local and external variables can be passed across functions. There is a way to declare global variables
# but this has not been explored for this app. See the following for more info:
# http://stackoverflow.com/questions/10659133/local-variables-within-aes?rq=1
# ggplot has some hard rules about passing variables and functions so we need to
# be aware of this. Refer to the above link on StackOverflow.
# get(input$var)  converts the string input$var into a variable (http://cran.r-project.org/doc/FAQ/R-FAQ.html#How-can-I-turn-a-string-into-a-variable_003f)
# without this and in combination of "environment", aes() does not see the variable being passed
# and instead sees it as a pure character ie string.
environment<-environment()
myplot <- ggplot(mygeomdata, aes(long, lat, group = group, fill = get(input$var)), environment = environment)
myplot <- myplot + labs(x = "Easting", y = "Northing") + scale_fill_gradient(low = "ghostwhite", high = "steelblue")
myplot <- myplot + geom_polygon()
myplot <- myplot + coord_equal()
myhist <- ggplot (mygeomdata, aes(get(input$var)), environment=environment) + geom_histogram(aes(y=..count..), fill = "#4292C6")
# Generate a plot of the requested variable against map
output$mapPlot <- renderPlot({
#    this prints the two graphs into a column but it can be easily modified for 2 cols
#    it also adjust the size of the myplot to be 2x that of myhist; grid,arrange and arrangeGrob need gridExtra
print(grid.arrange(arrangeGrob(myplot, myhist, ncol = 2, widths=c(2,1))))
})
})
source('E:/Rwd/RScript/Shiny/Moncton/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
brewer.pal()
display.brewer.all()
brewer.pal(9,"BrBG")
brewer.pal(5,"BrBG")
brewer.pal(6,"BrBG")
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
source('E:/Rwd/RScript/Shiny/SiteIndex/launchShiny.R', echo=TRUE)
