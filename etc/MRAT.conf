# ----------------------------------------------------------------------------
# Class configuration file 
# ----------------------------------------------------------------------------
#
#  THIS FILE SHOULD ONLY BE USED TO SET SIMPLE CONFIGURATION VALUES. NOT AS A  
#          REPLACEMENT FOR SETTING VARIABLES PROPERLY WITHIN A CLASS!! 
#
# This file is used to set the "self" variables within a 
# confighandler.ConfigHandler object. These are accessed via:
#
#  <some_python_class>
#  def __init__(self):
#      self.config = ConfigHandler(config_file = "/dir/dir/file.conf")
# 
#  if self.config.option == value:
#      print "This is where ", value, " is stored."
#   
# SECTIONS:
#  Each [SECTION] defines a specific set of option-value pairs. The SECTION
# name is userspace and arbitrary. 
#
# OPTIONS:
#  option=value
#   Each option within a section will create a variable BY THE SAME NAME AS 
#   THE OPTION in the instantiated cONFIGhANDLER OBJECT with its value set 
#   to "value"
#
#   Caveats:
#     - Spaces after the "=" are ignored.
#     - ALL VALUES ARE A STRING...so they MAY have to be converted for use. The
#       ConfigHandler attempts to convert floats, integers and boolean - but be 
#       prepared to check for this. 
#     - Numbers will be returned as floats or int...never bools. 
#     - Quotes around values will be returned as part of the string. 
#
# I.e.
#  "name=Hydrogen" creates a variable called "name" in the ConfigHandler object 
#  with the value of "Hydrogen". I.e. self.config.name = str("Hydrogen"). 
#  
# Creating a new optionname=somevalue will create a new variable in the 
# object. The class does not need to be edited. 
# 
# FORMAT:
#  [section_name]
#  option=value
#
#  Lines starting with "#" are ignored. 
#  Lines with "#" AFTER DATA ARE *NOT* IGNORED. 
#   I.e. name=Hydrogen # This comment will be included in the value for 'name'
#  Do NOT use quotes for text values. 
# ----------------------------------------------------------------------------

###############################################################################
[LOGGING]
logfile             = MRATrefactor.log
log_path            = /shared/GitHub/Tesera/MRAT_Refactor/log/
app_name            = MRATrefactor 
log_level           = 10 
screendump          = True
create_paths        = False 
###############################################################################

[CORE]
# Eventually rejigger ConfigHandler to assemble the paths automagically, 
# For now just use full paths in all
root_dir            = /shared/GitHub/Tesera/MRAT_Refactor/
conf_dir            = /shared/GitHub/Tesera/MRAT_Refactoretc/
etc_dir             = /shared/GitHub/Tesera/MRAT_Refactoretc/
log_dir             = /shared/GitHub/Tesera/MRAT_Refactorlog/
bin_dir             = /shared/GitHub/Tesera/MRAT_Refactorbin/
lib_dir             = /shared/GitHub/Tesera/MRAT_Refactorlib/
share_dir           = /shared/GitHub/Tesera/MRAT_Refactorshare/
Rwd                 = /shared/GitHub/Tesera/MRAT_RefactorRwd/

[RSERVE_HANDLER]
host        = localhost 
port        = 6311
atomicArray = True 
arrayOrder  = C 
defaultVoid = False 
oobCallback = None


